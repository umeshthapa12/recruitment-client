import { FileUrlsModel } from './files.model';

/**
 * User model
 */
export interface UsersModel {

    jobTitle?: string;

    // user unique Id
    uuid?: string;

    // user unique name
    email?: string;

    // user password
    password?: string;

    // user avatar url
    // user avatar url
    avatar?: FileUrlsModel | FileUrlsModel[] | string;

    // active user subject (employer,jobseeker)
    subject?: string;

    isPersistent?: boolean;

    // user display name
    displayName?: string;

    // session created date time
    issuedAt?: Date;

    // session expiry date time
    expires?: Date;

    // authentication type (employer, jobseeker)
    userType?: UserType;

    /**
   * user registered domain.
   */
    domain?: string;

    /**
     * About this user
     */
    about?: string;

    /**
     * User logo
     */
    logoUrl?: string;

    contacts?: string[];

    address?: string;

    favicon?: string;
    category?: string;

    faq?: string;
    terms?: string;
    privacy?: string;
    disclaimer?: string;
}

export enum UserType {
    // these values are matched with cookie value to evaluate user types
    // there are 2 types of users, jobseeker, employer
    Employer = 'employer',
    JobSeeker = 'jobseeker',
}

export interface LoginCred {
    userType: UserType;
    user: UsersModel;
}
/**  API response model */
export interface ResponseModel {

    /** Response as a content body */
    contentBody?: any;

    /** Response message in plain text */
    messageBody?: string;

    /** Error object within the xhr error response. */
    error?: ResponseModel;

    status?: number;

    statusText?: string;

    /** Response error collection such model validations etc., */
    errors?: ErrorCollection[];

}

export interface ErrorCollection {
    field: string;
    message: string;
}

/**
 * App cookie keys. Only client accessible cookie names generated by server.
 */
export enum CookieKeys {
    Subject = 'j_sub',
    UUId = 'j_uuid',
}

/**
 * Note: Do not reorder the placement of enum data. Reordering the enum data may get incorrect results on conditional query.
 */
export enum PublicNavDirectionTypes {
    None,
    SuperTopRight,
    TopHorizontal,
    OverCoverImageHorizontal,
    SuperBottomRightHorizontal
}

export interface VwSitePageNavStoreModel {
    id: number;
    path: string;
    label: string;
    isRoot: boolean;
    domain: string;
    direction: PublicNavDirectionTypes;
    directionText: string;
}

export class PublicNavModel {
    direction: PublicNavDirectionTypes;
    items: VwSitePageNavStoreModel[];
}


export interface TreeDataModel<T> {
    /**
     * object Id to store in DB if it is nav_id as resource type, Also used to mab data
     */
    id?: number;

    /**
     * Id of its parent object to map data
     */
    parentId?: number;

    /**
     * Tree level used by tree control
     */
    level?: number;

    /**
     * Used by UI
     */
    expandable?: boolean;

    /**
    * Client side display text
    */
    name?: string;

    /**
     * Payload resource name as a value to store in DB
     */
    data?: T;

    /**
    * Whether this object has user access
    */
    selected?: boolean;

    /**
     * Children of this node
     */
    children?: TreeDataModel<T>[];
}
